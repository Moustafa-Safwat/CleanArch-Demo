// <auto-generated />
using System;
using CleanArchDemo.Infra.Data.University.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchDemo.Infra.Data.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    partial class UniversityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchDemo.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CS101",
                            Credits = 3,
                            DepartmentId = 1,
                            Description = "Basic programming course",
                            Name = "Introduction to Programming"
                        },
                        new
                        {
                            Id = 2,
                            Code = "CS102",
                            Credits = 3,
                            DepartmentId = 1,
                            Description = "Data structures course",
                            Name = "Data Structures"
                        },
                        new
                        {
                            Id = 3,
                            Code = "MATH101",
                            Credits = 4,
                            DepartmentId = 2,
                            Description = "Introduction to Calculus",
                            Name = "Calculus I"
                        },
                        new
                        {
                            Id = 4,
                            Code = "MATH102",
                            Credits = 3,
                            DepartmentId = 2,
                            Description = "Linear Algebra course",
                            Name = "Linear Algebra"
                        },
                        new
                        {
                            Id = 5,
                            Code = "PHYS101",
                            Credits = 4,
                            DepartmentId = 3,
                            Description = "Introduction to Classical Mechanics",
                            Name = "Classical Mechanics"
                        },
                        new
                        {
                            Id = 6,
                            Code = "PHYS102",
                            Credits = 4,
                            DepartmentId = 3,
                            Description = "Introduction to Quantum Physics",
                            Name = "Quantum Physics"
                        });
                });

            modelBuilder.Entity("CleanArchDemo.Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CS",
                            Description = "Computer Science Department",
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 2,
                            Code = "MATH",
                            Description = "Mathematics Department",
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 3,
                            Code = "PHYS",
                            Description = "Physics Department",
                            Name = "Physics"
                        });
                });

            modelBuilder.Entity("CleanArchDemo.Core.Entities.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1980, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PhoneNumber = "1112223333"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            PhoneNumber = "4445556666"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1985, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Email = "charlie.miller@example.com",
                            FirstName = "Charlie",
                            LastName = "Miller",
                            PhoneNumber = "7778889999"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1990, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "diana.garcia@example.com",
                            FirstName = "Diana",
                            LastName = "Garcia",
                            PhoneNumber = "0001112222"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1982, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "edward.martinez@example.com",
                            FirstName = "Edward",
                            LastName = "Martinez",
                            PhoneNumber = "3334445555"
                        });
                });

            modelBuilder.Entity("CleanArchDemo.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2001, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "0987654321"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1999, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Email = "michael.johnson@example.com",
                            FirstName = "Michael",
                            LastName = "Johnson",
                            PhoneNumber = "2223334444"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(2002, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "emily.davis@example.com",
                            FirstName = "Emily",
                            LastName = "Davis",
                            PhoneNumber = "5556667777"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "david.wilson@example.com",
                            FirstName = "David",
                            LastName = "Wilson",
                            PhoneNumber = "8889990000"
                        });
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseInstructor");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            CourseId = 1
                        },
                        new
                        {
                            InstructorId = 1,
                            CourseId = 2
                        },
                        new
                        {
                            InstructorId = 2,
                            CourseId = 3
                        },
                        new
                        {
                            InstructorId = 2,
                            CourseId = 4
                        },
                        new
                        {
                            InstructorId = 3,
                            CourseId = 5
                        },
                        new
                        {
                            InstructorId = 3,
                            CourseId = 6
                        },
                        new
                        {
                            InstructorId = 4,
                            CourseId = 1
                        },
                        new
                        {
                            InstructorId = 5,
                            CourseId = 3
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseStudent");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CourseId = 1
                        },
                        new
                        {
                            StudentId = 1,
                            CourseId = 2
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 3
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 4
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 5
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 6
                        },
                        new
                        {
                            StudentId = 4,
                            CourseId = 1
                        },
                        new
                        {
                            StudentId = 5,
                            CourseId = 3
                        });
                });

            modelBuilder.Entity("CleanArchDemo.Core.Entities.Course", b =>
                {
                    b.HasOne("CleanArchDemo.Core.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CleanArchDemo.Core.Entities.Instructor", b =>
                {
                    b.HasOne("CleanArchDemo.Core.Entities.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CleanArchDemo.Core.Entities.Student", b =>
                {
                    b.HasOne("CleanArchDemo.Core.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.HasOne("CleanArchDemo.Core.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchDemo.Core.Entities.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("CleanArchDemo.Core.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchDemo.Core.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchDemo.Core.Entities.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");
                });
#pragma warning restore 612, 618
        }
    }
}
